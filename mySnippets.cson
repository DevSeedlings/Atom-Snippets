# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# JAVASCRIPT SNIPPETS
# ============================================================
'.source.js':

  # JAVASCRIPT SNIPPETS
  # ============================================================
  "Function":
    "prefix": "fun"
    "body": """
            function $1($2) {
              $3
            }
            """



  'console.log':
    'prefix': 'con'
    'body': """
            console.log('$1: ', $1);
            """



  'Reverse For Loop':
    'prefix': 'rfor'
    'body': """
            for (var i = ${1:array}.length - 1; i >= 0; i--) {

            }
            """



  # ANGULAR SNIPPETS
  # ============================================================
  'Angular App File':
    'prefix': 'app'
    'body': """
            // INITILIZE APP
            // ============================================================
            var app = angular.module("${1:app}", [$2]);

            $3
            """



  'controller':
    'prefix': 'ctrl'
    'body': """
            // INITILIZE CONTROLLER
            // ============================================================
            ${2:angular.module("${1:app}")}.controller("${3:main}Ctrl", function($scope) {

              // VARIABLES
              // ============================================================
              $4

              // FUNCTIONS
              // ============================================================


            });
            """



  'service':
    'prefix': 'serv'
    'body': """
            // INITILIZE SERVICE
            // ============================================================
            ${2:angular.module("${1:app}")}.service("${3:collection}Service", function($http) {

              // CRUD FUNCTIONS
              // ============================================================
              this.get${4:Collection}s = function() {
                return $http({
                  method: 'GET',
                  url: '/api/${5:collection}'
                });
              };
              this.get${4:Collection} = function(id) {
                return $http({
                  method: 'GET',
                  url: '/api/${5:collection}?_id='+id
                });
              };
              this.create${4:Collection} = function(${6:collection}) {
                return $http({
                  method: 'POST',
                  url: '/api/${5:collection}',
                  data: ${6:collection}
                });
              };
              this.edit${4:Collection} = function(id, ${6:collection}) {
                return $http({
                  method: 'PUT',
                  url: "/api/${5:collection}/" + id,
                  data: ${6:collection}
                });
              };
              this.delete${4:Collection} = function(id) {
                return $http({
                  method: 'DELETE',
                  url: '/api/${5:collection}/' + id
                });
              };

              // OTHER FUNCTIONS
              // ============================================================
              $7

            });
            """



  'authService':
    'prefix': 'authServ'
    'body': """
            // INITILIZE SERVICE
            // ============================================================
            ${2:angular.module("${1:app}")}.service("authService", function($http) {

              // AUTH FUNCTIONS
              // ============================================================
              this.login = function(user) {
                return $http({
                  method: 'post',
                  url: '/api/login',
                  data: user
                });
              };
              this.logout = function() {
                return $http({
                  method: 'get',
                  url: '/api/logout'
                });
              };
              this.getCurrentUser = function() {
                return $http({
                  method: 'GET',
                  url: '/api/me'
                });
              };
              this.registerUser = function(user) {
                return $http({
                  method: 'POST',
                  url: '/api/register',
                  data: user
                });
              };
              this.editUser = function(id, user) {
                return $http({
                  method: 'PUT',
                  url: "/api/user/" + id,
                  data: user
                });
              };

              // OTHER FUNCTIONS
              // ============================================================
              $3

            });
            """



  'localStorageService':
    'prefix': 'localServ'
    'body': """
            // INITILIZE SERVICE
            // ============================================================
            ${2:angular.module("${1:app}")}
            	.service("${3:localStorageService}", function($http) {

            		this.store = function(name, data) {
            			localStorage.setItem(name, JSON.stringify(data));
            			return 'saved';
            		};

            		this.get = function(name) {
            			var item = localStorage.getItem(name);
            			return JSON.parse(item);
            		};

            	});
            $4
            """



  'route/s config':
    'prefix': 'config'
    'body': """
              // CONFIG
              // ============================================================
              ${2:angular.module("${1:app}")}.config(function($stateProvider, $urlRouterProvider) {

                // INITILIZE STATES
                // ============================================================
                $stateProvider

                  // ${3:HOME} STATE
                  .state('${4:home}', {
                    url: '/${5:${4:home}}',
                    templateUrl: './app/routes/${6:${4:home}}/${7:${4:home}}Tmpl.html',
                    controller: '${8:${4:home}}Ctrl'
                  })${9:;}
                  $10

                // ASSIGN OTHERWISE
                // ============================================================
                $urlRouterProvider.otherwise('/${4:home}');
              });
            """



  'state':
    'prefix': 'state'
    'body': """

            // ${1:HOME} STATE
            .state('${2:home}', {
              url: '/${3:${2:home}}',
              templateUrl: './app/routes/${4:${2:home}}/${5:${2:home}}Tmpl.html',
              controller: '${6:${2:home}}Ctrl'
            })${7:;}
            $8
            """



  'directive':
    'prefix': 'dir'
    'body': """
            // INITILIZE DIRECTIVE
            // ============================================================
            ${2:angular.module("${1:app}")}.directive('${3:some}Dir', function() {
              return {
                restrict: '${4:EA}',
                templateUrl: './app/directives/${5:${3:some}}/${6:${3:some}}Tmpl.html',
                controller: '${7:${3:some}}Ctrl'
              };
            });
            $8
            """



  '.then':
    'prefix': 'then'
    'body': """
            .then(function(response) {
              $1
            });
            """



  '.catch':
    'prefix': 'catch'
    'body': """
            .catch(function(err) {
              $1
            });
            """



  'Endpoints':
    'prefix': 'end'
    'body': """
            // ${1:MODEL} ENDPOINTS
            app.get('/api/${2:model}', ${3:model}Ctrl.read);
            app.post('/api/${2:model}', ${3:model}Ctrl.create);
            app.put('/api/${2:model}/:id', ${3:model}Ctrl.update);
            app.delete('/api/${2:model}/:id', ${3:model}Ctrl.delete);

            $4
            """



  # SQL snippits
  # ============================================================
  "DataBase":
    "prefix": "db"
    "body": """
            db.${1:queryName}([$2], function(err, ${3:DataHere}){
              if (err) {
                console.log('${1:queryName}: ', err);
                return res.status(500).${4:send}(err);
              }

              res.status(200).${4:send}(${3:DataHere});
            });
            """



  'Postgres Server Controller':
    'prefix': 'pctrl'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var app = require('./../index);
            var db = app.get('db');

            // EXPORT METHODS
            // ============================================================
            module.exports = {

              // CRUD METHODS
              // ============================================================
              read: function(req, res) {
                db.${1:table}_read([$2], function(err, ${1:table}){
                  if (err) {
                    console.log('${1:table}_read: ', err);
                    return res.status(500).${3:send}(err);
                  }

                  res.status(200).${3:send}(${1:table});
                });
              },
              create: function(req, res) {
                db.${1:table}_insert([$2], function(err, ${1:table}){
                  if (err) {
                    console.log('${1:table}_insert: ', err);
                    return res.status(500).${3:send}(err);
                  }

                  res.status(200).${3:send}(${1:table});
                });
              },
              update: function(req, res) {
                db.${1:table}_update([$2], function(err, ${1:table}){
                  if (err) {
                    console.log('${1:table}_update: ', err);
                    return res.status(500).${3:send}(err);
                  }

                  res.status(200).${3:send}(${1:table});
                });
              },
              delete: function(req, res) {
                db.${1:table}_remove([$2], function(err, ${1:table}){
                  if (err) {
                    console.log('${1:table}_remove: ', err);
                    return res.status(500).${3:send}(err);
                  }

                  res.status(200).${3:send}(${1:table});
                });
              }

              // OTHER METHODS
              // ============================================================
              $3

            };
            """



  'Postgres Server':
    'prefix': 'pserver'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var express = require('express');
            var bodyParser = require('body-parser');
            var session = require('express-session');
            var massive = require('massive');

            // CONFIG
            // ============================================================
            var config = require('./config');

            // INITILIZE APP
            // ============================================================
            var app = module.exports = express();

            // INITILIZE DEPENDENCIES
            // ============================================================
            app.use(express.static(__dirname + './../public'));
            app.use(bodyParser.json());

            // MASSIVE SETUP
            // ============================================================
            var massiveUri = ${1:config.MASSIVE_URI};
            var massiveServer = massive.connectSync({
            	connectionString: massiveUri
            });
            app.set('db', massiveServer);
            var db = app.get('db');

            // CONTROLLERS
            // ============================================================
            var ${2:table}Controller = require('./controllers/${2:table}Controller');

            // ENDPOINTS
            // ============================================================
            // ${3:TABLE} ENDPOINTS
            app.get('/api/${4:table}', ${2:table}Controller.read);
            app.post('/api/${4:table}', ${2:table}Controller.create);
            app.put('/api/${4:table}/:id', ${2:table}Controller.update);
            app.delete('/api/${4:table}/:id', ${2:table}Controller.delete);

            // LISTEN
            // ============================================================
            var port = ${4:config.PORT};
            app.listen(port, function() {
              console.log('listening on port ', port);
            });
            """



  # Mongo snippits
  # ============================================================
  'Schema':
    'prefix': 'mschema'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var mongoose = require('mongoose');

            // DEFINE SCHEMA
            // ============================================================
            var ${1:model}Schema = mongoose.Schema({
              $3
            });

            // EXPORT SCHEMA
            // ============================================================
            module.exports = mongoose.model('${2:Model}', ${1:model}Schema);
            """



  'Server':
    'prefix': 'mserver'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var express = require('express');
            var cors = require('cors');
            var bodyParser = require('body-parser');
            var mongoose = require('mongoose');

            // CONTROLLERS
            // ============================================================
            var ${1:model}Ctrl = require('./controllers/${1:model}Ctrl');

            // INITILIZE APP
            // ============================================================
            var app = express();

            // INITILIZE DEPENDENCIES
            // ============================================================
            app.use(cors());
            app.use(bodyParser.json());

            // ENDPOINTS
            // ============================================================
            // ${2:MODEL} ENDPOINTS
            app.get('/api/${3:model}', ${1:model}Ctrl.read);
            app.post('/api/${3:model}', ${1:model}Ctrl.create);
            app.put('/api/${3:model}/:id', ${1:model}Ctrl.update);
            app.delete('/api/${3:model}/:id', ${1:model}Ctrl.delete);

            // VARIABLES
            // ============================================================
            var port = ${4:3000};
            var mongoURI = 'mongodb://localhost:27017/${3:DBName}';

            // MONGO CONNECTION
            // ============================================================
            mongoose.set('debug', true);
            mongoose.connect(mongoURI);
            mongoose.connection.once('open', function() {
              console.log('Connected to mongo at: ', mongoURI);
              });

            // LISTEN
            // ============================================================
            app.listen(port, function() {
              console.log('listening on port ', port);
            });
            """



  'Server Controller':
    'prefix': 'mctrl'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var ${1:Model} = require('./../models/${1:Model}');

            // EXPORT METHODS
            // ============================================================
            module.exports = {

              // CRUD METHODS
              // ============================================================
              read: function(req, res) {
                ${1:Model}.find(req.query, function(err, ${2:result}) {
                  if (err) {
                    res.status(500).send(err);
                  }
                  res.status(200).send(${2:result});
                });
              },
              create: function(req, res) {
                ${1:Model}.create(req.body, function(err, ${2:result}) {
                  if (err) {
                    res.status(500).send(err);
                  }
                  res.status(200).send(${2:result});
                });
              },
              update: function(req, res) {
                ${1:Model}.findByIdAndUpdate(req.params.id, req.body, function(err, ${2:result}) {
                  if (err) {
                    res.status(500).send(err);
                  }
                  res.status(200).send(${2:result});
                });
              },
              delete: function(req, res) {
                ${1:Model}.findByIdAndRemove(req.params.id, function(err, ${2:result}) {
                  if (err) {
                    res.status(500).send(err);
                  }
                  res.status(200).send(${2:result});
                });
              }

              // OTHER METHODS
              // ============================================================
              $3

            };
            """



  # REACT SNIPPETS
  # ============================================================
  'React Dumb Component':
    'prefix': 'dcomp'
    'body': """
            import React from 'react';

            class ${1:Comp} extends React.Component {
              constructor(props) {
                super(props);

                this.state = {};
              }

              render() {
                return(
                  <div>

                  </div>
                );
              }
            }

            export default ${1:Comp};
            """



  'React Smart Component':
    'prefix': 'scomp'
    'body': """
            import React from 'react';
            import {connect} from 'react-redux';
            import {bindActionCreators} from 'redux';

            import {${1:action}} from '${2:./../actions/Actions}';

            class ${3:Comp} extends React.Component {
              constructor(props) {
                super(props);

                this.state = {};
              }

              render() {
                return(
                  <div>

                  </div>
                );
              }
            }

            var mapStateToProps = function(state) {
              return {
                ${4:reducer}: state.${4:reducer}
              }
            };

            var mapDispatchToProps = function (dispatch) {
              return bindActionCreators({
                  ${1:action}: ${1:action},
                }, dispatch);
            }

            export default connect(mapStateToProps)(${3:Comp});
            """



  'Reducer':
    'prefix': 'reducer'
    'body': """
            const ${1:ACTION_TYPE} = "list/${1:ACTION_TYPE}";

            const initialState = {
              ${2:${3:Example}: []}
            };

            export default function reducer(state = initialState, action) {
              console.log(action);

              switch (action.type) {
                case ${1:ACTION_TYPE}:
                  return {
                    ${2:${3:Example}: [...state.${3:Example}]}
                  };

                default:
                  return initialState;
              }

              return state;
            }
            """



  'Action':
    'prefix': 'action'
    'body': """
            export function ${1:action}(payload) {
              return {type: ${2:ACTION_TYPE}, payload};
            }
            """



  'Div':
    'prefix': 'div'
    'body': """
            <div className="$1">
              $2
            </div>
            """



  # GULP SNIPPET
  # ============================================================
  'gulpfile':
    'prefix': 'gulp'
    'body': """
            // REQUIRE DEPENDENCIES
            // ============================================================
            var gulp = require('gulp');
            var concat = require('gulp-concat');
            var annotate = require('gulp-ng-annotate');
            var uglify = require('gulp-uglify');
            var sass = require('gulp-sass')

            // DECLARE FILE PATHS
            // ============================================================
            var paths = {
              jsSource: ['./public/app/**/*.js', '!/public/bundle.js'],
              sassSource: ['./public/${1:app}/**/*.sass'],
              indexSource: ['./public/index.html']
            };

            // DEFINE TASKS
            // ============================================================
            gulp.task('js', function() {
              return gulp.src(paths.jsSource)
              .pipe(concat('bundle.js'))
              .pipe(annotate())
              //.pipe(uglify()) //Uncomment when code is production ready
              .pipe(gulp.dest('./${2:dist}'));
            });

            gulp.task('sass', function() {
              return gulp.src(paths.sassSource)
                .pipe(sass())
                .pipe(concat('bundle.css'))
                .pipe(gulp.dest('./${2:dist}'));
            });

            gulp.task('index', function() {
              return gulp.src(paths.indexSource)
                .pipe(gulp.dest('./${2:dist}'));
            })
            $3
            // WATCH TASK
            // ============================================================
            gulp.task('watch', function() {
              gulp.watch(paths.jsSource, ['js']);
              gulp.watch(paths.sassSource, ['sass']);
              gulp.watch(paths.indexSource, ['index']);
            });

            // DEFAULT TASK - first thing to run when gulp is called
            // ============================================================
            gulp.task('default', ['watch', 'js', 'sass', 'index']);
            """


# HTML SNIPPETS
# ============================================================
'.text.html, .text.html .meta.scope.between-tag-pair, .text.html .punctuation.tag.begin':

  'modal template':
    'prefix': 'modal'
    'body': """
            <!-- MODAL TEMPLATE -->
            <div class="overlay">

            </div>
            <div class="fade" ${1:ng-click="close()"}></div>
            """



  'Angular Index':
    'prefix': 'ahtml'
    'body': """
            <!DOCTYPE html>
            <html ng-app="${1:app}">

              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>$2</title>
                <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
                <link rel="stylesheet" href="styles/normalize.css">
                <link rel="stylesheet" href="./bundle.css">
              </head>

              <body>

                <ui-view></ui-view>

                <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.js"></script>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.3.2/angular-ui-router.js"></script>
                <script src="./bundle.js"></script>
              </body>

            </html>
            """



# CSS SNIPPETS
# ============================================================
'.source.css':
  'modal classes':
    'prefix': 'modal'
    'body': """
            // MODAL OVERLAY
            // ============================================================
            .overlay {
              color: black;
              position: fixed;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              padding: 25px;
              background-color: #ffffff;
              z-index: 100;
              overflow: auto;
              border-radius: 3px;
              border: 1px solid #C0C3C5;
            }

            // MODAL FADE
            // ============================================================
            .fade {
              position: fixed;
              left: 0%;
              top: 0%;
              background-color: black;
              -moz-opacity: 0.7;
              opacity: .70;
              filter: alpha(opacity=70);
              width: 100%;
              height: 100%;
              z-index: 99;
            }
            """



# CSS SNIPPETS
# ============================================================
'.source.sass':
  'modal classes':
    'prefix': 'modal'
    'body': """
            // MODAL OVERLAY
            // ============================================================
            .overlay
              color: black
              position: fixed
              top: 50%
              left: 50%
              transform: translate(-50%, -50%)
              padding: 25px
              background-color: #ffffff
              z-index: 100
              overflow: auto
              border-radius: 3px
              border: 1px solid #C0C3C5

            // MODAL FADE
            // ============================================================
            .fade
              position: fixed
              left: 0%
              top: 0%
              background-color: black
              -moz-opacity: 0.7
              opacity: .70
              filter: alpha(opacity=70)
              width: 100%
              height: 100%
              z-index: 99
            """
